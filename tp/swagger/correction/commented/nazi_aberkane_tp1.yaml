swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
paths:
## Affichages des produits 
  # Une url plus explicite aurait été pas mal
  /:
    get:
      tags:
      - "product"
      summary: "Retourne les bon plans au client"
      description: "affiche les bon plan ou aucune sugestion on prend en compte que l'utilsateur es déja connecte"
      parameters:
        - in: query
          name: iduser
          type: integer
          description: "id de l'utilsateur en session"
      responses:
        200:
          description: OK
  /products: 
    get: 
      tags:
        - "product"
      summary: "Recherche des article avec un tri par prix (non obligatoire)"
      description: "Recherche des article avec un tri par prix"
      operationId: "findProducts"
      produces: 
        - "application/json"
      # Manque la pagination
      parameters:
        - in: query
          name: name
          type: string
          description: "nom de l'article rechercher"
        - in: query
          name: filterPrice
          type: integer
          minimum: 0
          exclusiveMinimum: false
          maximum: 1
          exclusiveMaximum: false
          description: filtre croissant ou décroissant 1 ou 0
      responses: 
        "200":
          description: OK
  # Possible de la fusionner avec celle du dessus avec juste un query param
  /products/{category}: 
    get: 
      tags:
        - "product"
      summary: ""
      description: "filtre les articles par catégory"
      produces: 
        - "application/json"
      # Manque de quoi paginer la réponse
      parameters:
        - in: path
          name: category
          type: integer
          required: true
      responses: 
        "200":
          description: OK
  # Pourquoi ajouter details dans l'url ?
  /products/{id}/details:
    get:
      tags:
        - "product"
      summary: "Affiche les detail d'un article en fonction de son id"
      description: "Detail d'un article cette fonction fait également appel à la method rest /products/{id}/similar pour obtenir également la liste des produit similaire"
      produces: 
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: "nom de l'article rechercher"
      responses:
        200:
          description: OK
  /products/{id}/similar:
    get:
      tags:
      - "product"
      summary: "Affiche les article similaire à l'article"
      description: "Affiche les article similaire à l'article dans l'url"
      produces: 
        - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: "nom de l'article rechercher"
      responses:
        200:
          description: OK
## Gestion du panier 
  # On ne peut pas lire le panier, c'est dommage
  /shoppingCart:
    post:
      tags: 
      - "ShoppingCart"
      summary: "Ajout d'un prduit au panier"
      description: "On considére que le client est connecter pour ajouter a sont panier qui lui est affecté en base le panier du client est creer à la premiére connexion et est toujours le même " 
      produces: 
          - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema :
          $ref : '#/definitions/ProductInCart'
        required: true
      responses:
        200:
          description: OK
    delete:
      tags: 
      - "ShoppingCart"
      summary: "Supprimer produit panier"
      description: "Supprimer un article"
      parameters:
      - in: query
        name: refArticle
        type: integer
        required: true
      responses:
        200:
          description: OK
    # Put doit avoir un body
    # le mieux c'est dont soit de mettre la quantité en body
    # soit d'utiliser un POST (même si c'est mieux que ce dernier ait un body)
    put:
      tags: 
      - "ShoppingCart"
      summary: "Modifier la quantité d'un produit du panier"
      description: "Modifier la quantité d'un probuit (augementer ou diminuer)"
      parameters:
      - in: query
        name: refArticle
        type: integer
        required: true
      - in: query
        name: qte
        type: integer
        minimum: 1
        required: true
      responses:
        200:
          description: OK
  # Pas besoin de faire une URL pour cela le DELETE /shoppingCart sans le queryParam est suffisant
  /shoppingCart/drain:
    delete:
        tags: 
        - "ShoppingCart"
        summary: "Vider panier"
        description: "Avec l'identifiant de l'utilisateur en session on vide le panier 1 PANIER par utilisateur"
        parameters:
        - in: query
          name: idUser
          type: integer
          required: true
        responses:
          200:
            description: OK
# Manque la partie sur les commandes
definitions:
  Product:
    type: object
    properties:
      id:
        type: integer
      # Peut être un mélange avec le client
      name:
        type: string
      prenom:
        type: string
      price:
        type: number
        format: double
      description:
        type: string
      picture:
        type: string 
      category:
        $ref: '#/definitions/Category'
      size:
        type: string
        description: "Longeur X Hauteur X Largeur"
    required:
      - nom
      - prenom
      - age
  Category:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
    required: 
      - name
  Client:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
  ShoppingCart:
    type: object
    properties:
      id: 
        type: integer
      lastUpdateDate:
        type: string
        format: date 
      products:
        type: array
        items:
          $ref: '#/definitions/ProductInCart'
      totalCost:
        type: number
        format: double
  ProductInCart:
    type: object
    properties:
      refArticle:
        type: integer
      nameArticle:
        type: string
      image:
        type: string
      qte:
        type: integer
      unitCost:
        type: integer
        format: double
      totalCost:
        type: integer
        format: double
  Order: 
    type: object
    properties:
      id:
        type: integer
      status:
        type: string
        enum: 
          - En cours
          - Validée
          - Terminée
          - Annulée
      creationDate:
        type: string
        format: date
      updateDate:
        type: string
        format: date
      client:
        $ref: '#/definitions/Client'
      totalPrice:
        type: integer
        format: double
      listArticle:
        type: array
        items:
          $ref: '#/definitions/ProductInCart'