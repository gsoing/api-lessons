swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
tags:
  - name: "Product"
    description: "Get access to the products and their details"
  - name: "Shopping cart"
    description: "Operations on the shopping cart"
  - name: "Order"
    description: "Operations on the order"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
paths:
  # On manipule des produits donc un S à product c'est mieux
  /product/promotion:
    get:
      tags:
        - "Product"
      summary: "Returns products on promotion"
      description: "Returns the name of the products and the price"
      operationId: "getPromotionProduct"
      produces:
        - "application/json"
      parameters: []
      responses:
        # Un tableau ca aurait été pas mal
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
  # Pour le coup je n'ai pas demandé ce service
  # J'ai demandé à recherché des produits
  # C'est un peu bizarre de mettre les critères de tri dans une URL
  # pareil on ne met pas d'action dans une URL
  /product/promotion/sort/{sortBy}/{sortMode}:
    get:
      tags:
        - "Product"
      summary: "Returns products on promotion sorted by price or category"
      description: "Returns the name of the products and the price sorted by price or category asc or desc"
      operationId: "getPromotionProductSorted"
      produces:
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "sortBy"
          in: "path"
          description: "either one of the category or price"
          required: true
          type: "string"
          enum:
            - "high-tech"
            - "maison"
            - "vetement"
            - "price"
        - name: "sortMode"
          in: "path"
          description: "Asc or Desc"
          required: true
          type: "string"
          enum:
            - "asc"
            - "desc"
      # J'ai un petit doute sur le retour,
      # surtout on ne retourne jamais le MDP d'un utilisateur
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /product/{productId}:
    get:
      tags:
        - "Product"
      summary: "Returns detailed of a single product"
      operationId: "getProductById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "id of product"
          required: true
          type: "string"
          format: "int64"
      # Pareil je ne suis pas sur que le retour soit très adéquat
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
  # Le root est une liste à priori, /carts serait mieux
  /cart/{userName}:
    get:
      tags:
        - "Shopping cart"
      summary: "Returns cart of user"
      operationId: "getCartByUserName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userName"
          in: "path"
          description: "user name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Cart'
        400:
          description: "Invalid ID supplied"
        # user ? panier ?
        404:
          description: "Pet not found"
  /product:
    # Je ne vois pas en quoi un POST sur /product permet de manipuler un panier
    post:
      tags:
        - "Product"
      summary: "Add a new product to the cart"
      description: ""
      operationId: "addProduct"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la quantité
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the cart"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        # Plutot un 400 en cas de mauvaise entrée
        405:
          description: "Invalid input"
  # On a commencé en /cart/{userName} et la on passe en /cart/procut, quel est le lien entre les 2 ?
  # si product est une liste /productS serait plus indiqué
  /cart/product/{productId}:
    post:
      tags:
        - "Shopping cart"
      summary: "Updates qty of product"
      description: ""
      operationId: "updateQtyProduct"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "quantity"
          in: "formData"
          description: "quantity of product"
          required: true
          type: "integer"
      responses:
        # Pareil pour une input invalid c'est plus 400
        # peut-être un 404 si le productId n'existe pas
        405:
          description: "Invalid input"
    delete:
      tags:
        - "Shopping cart"
      summary: "Delete product by ID"
      description: ""
      operationId: "deleteProductFromCart"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /cart/product/all:
    # Pourquoi ajouter /all alors que DELETE /cart/product veut dire la même chose
    delete:
      tags:
        - "Shopping cart"
      summary: "Delete all product"
      description: ""
      operationId: "deleteAllProductFromCart"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        400:
          description: ""
        # Je ne vois pas comment tu peux retourner 404
        404:
          description: "Order not found"
  /order/{userName}:
    get:
      tags:
        - "Order"
      summary: "Returns orders"
      operationId: "getOrder"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la pagination
      # et le filtrage par statut
      parameters:
        - name: "userName"
          in: "path"
          description: "user name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          # Un tableau serait mieux
          schema:
            $ref: '#/definitions/Order'
        400:
          description: "Invalid ID supplied"
        404:
          description: ""
  # L'url n'est pas très REST : /orders/{orderId}/invoice serait mieux
  /order/getInvoice/{orderId}:
    get:
      tags:
        - "Order"
      summary: "Returns invoice"
      operationId: "get invoice"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "order id"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Invoice'
        400:
          description: "Invalid ID supplied"
        404:
          description: ""
  # Add ??? je ne comprends on ajoute rien, purchase; checkout par exemple me semble plus approprié
  # et pareil on a comment en /cart/{userName}
  /cart/add:
    post:
      tags:
        - "Shopping cart"
      summary: "Purchase the cart"
      description: ""
      operationId: "confirmCart"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        # Quel input ?
        405:
          description: "Invalid input"
    # L'url n'est pas très REST : /orders/{orderId}/cancel serait mieux
  /order/cancel/{orderId}:
    post:
      tags:
        - "Order"
      summary: "Cancel an order"
      description: ""
      operationId: "cancelOrder"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la raison de l'annulation
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of product that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
      responses:
        405:
          description: "Invalid input"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/User"
      orderList:
        $ref: "#/definitions/OrdertList"
      updatedOn:
        type: "string"
        format: "date-time"
      createdOn:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "pending"
        - "approved"
        - "finish"
        - "cancel"
      orderPrice:
        type: "number"
        format: "float"
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      categoryName:
        type: "string"
        description: "list of product's category"
        enum:
        - "HIGH-TECH"
        - "MAISON"
        - "VETEMENT"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32" 
        description: "User Status"
    xml:
      name: "User"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      reference:
        type: "string"
      wording:
        type: "string"
      smallDescription:
        type: "string"
      bigDescription:
        type: "string"
      size:
        type: "string"
      productPicture:
        type: "string"
        format: "binary"
      price:
        type: "number"
        format: "float"
    xml:
      name: "Product"
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      list:
        $ref: '#/definitions/CartList'
      lastUpdate:
        type: "string"
        format: "date-time"
      totalPrice:
        type: "number"
        format: "float"
      description:
        type: "string"
    xml:
      name: "Cart"
  Invoice:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      totalPrice:
        type: "number"
        format: "float"
    xml:
      name: "Invoice"
  PromotionList:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      product:
        $ref: "#/definitions/Product"
      promoBegin:
        type: "string"
        format: "date-time"
      promoEnd:
        type: "string"
        format: "date-time"
      description:
        type: "string"
    xml:
      name: "promotionList"
  CartList:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      product:
        $ref: "#/definitions/Product"
      quantity:
        type: "integer"
        format: "int64"
    xml:
      name: "promotionList"
  OrdertList:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      product:
        $ref: "#/definitions/Product"
      quantity:
        type: "integer"
        format: "int64"
    xml:
      name: "orderList"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
