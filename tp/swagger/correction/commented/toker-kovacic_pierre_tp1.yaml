swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
tags:
  - name: "suggestion"
    description: "Concernant les suggestions"
  - name: "article"
    description: "Concernant un article"
  - name: "basket"
    description: "Concernant le panier"
  - name: "order"
    description: "Concernant les commandes"
paths:
  /suggestions:
     get:
      tags:
        - "suggestion"
      summary: "Proposer des suggestions"
      description: "Il peut y avoir 0 à N suggestions."
      operationId: "getSuggestions"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        200:
          description: "successful"
          schema:
            type: array
            items:
              $ref: "#/definitions/Article"
  # On est sur une collection donc article doit avoir un S
  # pourquoi ajouter findByDenomination ?
  /article/findByDenomination:
    get:
      tags:
        - "article"
      summary: "Trouver un article via sa dénomination."
      description: "Chercher un article. Il peut y avoir 0 à N articles dans le résultat de la recherche."
      operationId: "findArticleByDenomination"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la pagination
      # Manque le tri
      parameters:
        - name: "denomination"
          in: "query"
          description: "Renseinger la dénomination pour effectuer une recherche."
          required: true
          type: "string"
        - name: "categorie"
          in: "query"
          description: "Renseinger la catégorie."
          required: false
          type: "array"
          items:
            type: "string"
            enum:
            - "High-tech"
            - "Maison"
            - "Vêtement"
            default: "Maison"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
        400:
          description: "Termes de recherche invalides."
  # Pareil manque un S
  /article/{articleId}:
    get:
      tags:
        - "article"
      summary: "Trouver un article grâce à son ID"
      description: "Retourne l'article trouvé"
      operationId: "getArticleById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "articleId"
          in: "path"
          description: "ID de l'article à retourner"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
        400:
          description: "ID invalide."
        404:
          description: "Articlé non trouvé."
  /basket:
    get:
      tags:
        - "basket"
      summary: "Accèder à son panier en tant que client"
      description: "Retourne le panier du client"
      operationId: "getBasket"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client pour récupérerer son panier unique"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Basket"
        400:
          description: "Id du client invalide."
        404:
          description: "Panier non trouvé."
  /basket/{articleId}:
    post:
      tags:
        - "basket"
      summary: "Place un article dans le panier du client."
      description: ""
      operationId: "putInBasket"
      produces:
        - "application/xml"
        - "application/json"
      # Une quantité aurait été pas mal aussi
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          description: "Id de l'article à placer dans le panier."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Article ajouté au panier"
    delete:
      tags:
        - "basket"
      summary: "Supprime un article depuis le panier du client."
      operationId: "deleteFromBasket"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          description: "Id de l'article à placer dans le panier."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Article supprimé au panier"    
        404:
          description: "Article introuvable dans le panier"
    # Tu modifies quoi comment ? manque pas un paramètre de quantité ?
    put:
      tags:
        - "basket"
      summary: "Modifier un article dans le panier"
      operationId: "updateArticleInBasket"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          description: "Id de l'article à placer dans le panier."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Article modifié"
        400:
          description: "Article non valide"
        404:
          description: "Article introuvable"
  # Pas besoin de mettre clear, le verbe DELETE est suffisant
  /basket/clear:
    delete:
      tags:
        - "basket"
      summary: "Supprime tous les articles depuis le panier du client."
      operationId: "deleteBasket"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
      responses:
        # si on dit que le panier existe toujours vider un truc vide ne devrait pas retourner d'erreurs
        404:
          description: "Panier introuvable"
  /basket/checkout:
    # PUT doit avoir un body
    put:
      tags:
        - "basket"
      summary: "Valide le panier et le vide."
      operationId: "checkoutBasket"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
      responses:
        # Excellente idée de retourner la commande
        200:
          description: "Commande effectuée"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Panier non valide"
  # C'est une liste donc pluriel
  /order:
    get:
      tags:
        - "order"
      summary: "Obtient l'ensemble des commandes du client."
      operationId: "getOrders"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Obtention avec succès."
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        400:
          description: "Erreur."
  /order/{orderId}:
    # Put doit avoir un body
    put:
      tags:
        - "order"
      summary: "Annule une commande d'un client"
      operationId: "cancelOrderById"
      produces:
        - "application/xml"
        - "application/json"
      # Manque la raison d'annulation
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "orderId"
          in: "path"
          description: "ID de la commande"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Commande modifiée"
          schema:
            $ref: "#/definitions/Order"
        # 404 pour introuvable
        400:
          description: "Commande introuvable"
    get:
      tags:
        - "order"
      summary: "Annule une commande d'un client"
      operationId: "cancedlOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "orderId"
          in: "path"
          description: "ID de la commande"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Commande modifiée"
          schema:
            $ref: "#/definitions/Order"
        # pour introuvable on est sur 404
        400:
          description: "Commande introuvable"
  # une facture c'est invoice
  /order/{orderId}/bill:
    get:
      tags:
        - "order"
      summary: "Récupérer la facture liée à une commande d'un client"
      operationId: "getBill"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId" #Via un cookie
          in: "query"
          description: "ID du client (via un cookie)"
          required: true
          type: "integer"
          format: "int64"
        - name: "orderId"
          in: "path"
          description: "ID de la commande"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Facture trouvée"
          schema:
            type: string
            format: binary
        400:
          description: "Facture introuvable"
definitions:
    Article:
      type: "object"
      properties:
        # Quelle est la différence entre refId et articleId ?
        articleId:
          type: "integer"
          format: "int64"
        refId:
          type: "integer"
          format: "int64"
        denomination:
          type: "string"
        categorie:
          type: array
          items:
            $ref: "#/definitions/Categorie"
        price:
          type: "number"
          format: "double"
        articleDescription:
          type: "string"
        # un objet ce serait mieux
        dimension:
          type: "string"
        image:
          type: object
      xml:
        name: "Article"
    Categorie:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Category"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
      xml:
        name: "User"
    Basket:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        lastUpdate:
          type: "string"
          format: "date-time"
        totalCost:
          type: "number"
          format: "double"
        user:
          $ref: '#/definitions/User'
        articles:
          type: array
          items:
             $ref: "#/definitions/Article"
      xml:
        name: "Basket"
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        creationDate:
          type: "string"
          format: "date-time"
        lastUpdate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum:
          - "En cours"
          - "Validé"
          - "Terminé"
          - "Annulé"
        totalCost:
          type: "number"
          format: "double"
        user:
          $ref: '#/definitions/User'
        articles:
          type: array
          items:
             $ref: "#/definitions/Article"
      xml: 
        name: "Order"