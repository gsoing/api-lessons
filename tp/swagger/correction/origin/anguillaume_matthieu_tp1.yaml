swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
tags:
- name : "Products"
  description: "Manage products for customers"
- name : "Basket"
  description: "Manage basket for customers"
- name : "Order"
  description: "Manage orders for customers"
schemes:
- "https"


paths:
  /product:
   get:
      tags:
      - "Products"
      summary: "Result"
      description: "List of products"
      produces:
      - "application/json"
      responses:
      200:
        description: "A list of products."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/Product'
  
  /product/{wording}?sortByPrice=[asc|desc]:
    get:
      tags:
      - "Products"
      summary: "Order the products"
      description: "Order products by price"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: wording
        type: string
        required: true
      - in: path
        name : sortByPrice
        type : string
        enum: [asc, desc]
        required: true
      responses:  
        200:
            description: "A list of products"
            schema:
            type: array
            items:
              $ref: "#/definitions/Product"
  
  /products/filterProductByCategory/{category}:
      get:
        tags:
        - "Products"
        description: "Get product filtery by category"
        parameters:
        - in: path
          name: category
          type: string
          enum:
          - "HIGH-TECH"
          - "MAISON"
          - "VÊTEMENTS"
          description: "Filtering"
          required: true
        responses:
          200:
            description: Ok
            schema:
            type: array
            items:
              $ref: "#/definitions/Product"
  
  /basket/{id}:
    get:
        tags:
        - "Basket"
        summary: "Get your basket"
        description: "Get the basket of a customer"
        produces:
        - "application/json"
        parameters:
        - in: path
          name: id
          type: integer
          required: true
        responses:
          200:
            description: "Here is your basket"
            schema:
              $ref: "#/definitions/Basket"
 
  /basket/{id}/updateBasket: 
    put:
      tags:
      - "Basket"
      summary: "Update a basket"
      description: "Update the basket corresponding to the client id" 
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Basket"
      responses:
        200:
          description: OK
    
  /basket/{id}/deleteBasket:  
    delete:
      tags:
      - "Basket"
      summary: "Delete a basket"
      description: "Delete the basket corresponding to the client id" 
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Basket"
      responses:
        200:
          description: OK
    
  /order/{id}?sortByStatus=[asc|desc]:
    get:
      tags:
      - "Order"
      summary: "Show the orders"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: path
        name : sortByStatus
        type : string
        enum: [asc, desc]
        required: true
      responses:  
        200:
          description: "A list of orders"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Order"
            
  /order/{id}/filterByStatus/{status}
    get:
      tags:
      - "Order"
      summary: "Filter orders"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: path
        name : status
        type : string
        enum:
        - 
        required: true
      responses:  
        200:
          description: "A list of orders"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Order"
  
  /order/{id}?sortByDate=[asc|desc]:
    get:
      tags:
      - "Order"
      summary: "Show the orders"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: path
        name : sortByDate
        type : string
        enum:
          - "EN COURS"
          - "VALIDEE"
          - "TERMINEE"
          - "ANNULEE"
        required: true
      responses:  
        200:
          description: "A list of filtered orders"
          schema:
          type: "array"
          items:
            $ref: "#/definitions/Order"
    
      
      
definitions:
  Product:
    type: object
    properties:
      reference:
        type: integer
      wording:
        type: string
      price:
        type: number
      description:
        type: string
      picture:
        type: string # une url
      category:
        type: string
        enum:
          - "HIGH-TECH"
          - "MAISON"
          - "VÊTEMENTS"
      details:
        $ref: "#/definitions/Details"
    required:
      - reference
      - wording
      - price
      - description
      - picture
      - category
      - details
  
  Details:
    type: object
    properties:
      completeDescription:
        type: string
      pictureList:
        type: array
        items:
          type: string # des url
      size:
        type: string #L x M x H
    required: 
      - completeDescription
      - pictureList
      - size
  
  SelectedProduct:
    type: object
    properties:
      product:
        $ref: "#/definitions/Product"
      quantity:
        type: integer
      totalPrice:
        type: number
    required: 
      - product
      - quantity
      - totalPrice
      
  Basket:
    type: object
    properties:
      id: #correspondra à l'id du client vu que 1 client à 1 seul panier
        type: integer
      lastUpdate:
        type: string
        format: timestamp
      productList:
        type: array
        items:
          $ref: "#/definitions/SelectedProduct"
      totalPrice:
        type: number
    required: 
      - id
      - lastUpdate
  
  Order:
    type: object
    properties:
      id:
        type: integer
      status:
        type: string
        enum:
          - "EN COURS"
          - "VALIDEE"
          - "TERMINEE"
          - "ANNULEE"
      justification:
        type: string
      createdAt:
        type: string
        format: timestamp
      lastUpdate:
        type: string
        format: timestamp
      customer:
        $ref: "#/definitions/Customer"
      productList:
        type: array
        items:
          $ref: "#/definitions/SelectedProduct"
      totalPrice:
        type: number
      
    required:
      - id
      - status
      - createdAt
      - lastUpdate
      - productList
      - totalPrice
      
  Customer:
    type: object
    properties:
      customer: #pas de spec pour client donc juste un champ pour default
        type: string
    required:
      - customer
      