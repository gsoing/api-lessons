swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
paths:
  /suggestions:
    get:
      tags:
        - "suggestions"
      summary: "get suggestions"
      description: "affichage des bons plans disponibles"
      operationId: "getSuggestions"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "id du client connecté"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Suggestion"
        400:
          description: "Invalid status value"
  /articles/{name}:
    get:
      tags:
        - "article"
      summary: "Find article by name"
      description: "retourne la liste des articles"
      operationId: "getArticlesByName"
      produces:
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "name"
          in: "path"
          description: "le nom de l'article qu'on souhaite rechercher"
          required: true
          type: "string"
        - name: "sorted-by"
          in: "query"
          description: "le tri par prix on passe en string + ou - pour le type de tri"
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
  # Tu aurais pu fusionner cette url avec l'autre on peut chercher par nom et par catégorie
  /articles/findByCategories:
    get:
      tags:
        - "article"
      summary: "Finds articles by categories"
      description: "filtrer les articles par les catégories proposées"
      operationId: "findByCategories"
      produces:
        - "application/json"
      parameters:
        - name: "categories"
          in: "query"
          description: "catégories proposées pour le filtre"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "HIGH-TECH"
            - "MAISON"
            - "VÊTEMENTS"
            default: "available"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
        400:
          description: "Invalid status value"
  # Pourquoi une nouvelle ressource, on est bien sur des articles
  /articleDetail/{articleId}:
    get:
      tags:
        - "article"
      summary: "Find article detail by id"
      description: "retourne les détails d'articles"
      operationId: "getDetailArticle"
      produces:
        - "application/json"
      parameters:
        - name: "articleId"
          in: "path"
          description: "l'id de l'article qu'on souhaite détailler"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DetailArticle"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
  /cart:
    get:
      tags:
        - "cart"
      summary: "get cart"
      description: "affichage le panier de l'utilisateur connecté"
      operationId: "getcart"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "id du client connecté"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          # Pas besoin de tableau il n'y a que 1 panier par utilisateur
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cart"
        400:
          description: "Invalid status value"
    post:
      tags:
        - "cart"
      summary: "Add article on cart"
      description: "ajouter un article dans le panier de l'utilisateur connecté"
      operationId: "addArticle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "article qu'on veut ajouter dans le panier"
          required: true
          schema:
            $ref: "#/definitions/ArticleAttribute"
      responses:
        # Plutot 400
        405:
          description: "Invalid input"
    delete:
      tags:
        - "cart"
      summary: "Deletes all articles from cart"
      description: "supprimer tous les articles du panier du client connecté"
      operationId: "deleteArticles"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
  /cart/{articleId}:
    delete:
      tags:
        - "cart"
      summary: "Deletes an article from cart"
      description: "supprimer un article du panier par son id"
      operationId: "deleteArticle"
      produces:
        - "application/json"
      parameters:
        - name: "articleId"
          in: "path"
          description: "article à supprimer"
          required: true
          type: "integer"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
  /cart/{articleId}/quantity/{quantity}:
    # un PUT doit avoir un body, donc il aurait mieux valu ne pas mettre quantity en pathParam mais en body
    put:
      tags:
        - "cart"
      summary: "modify article quantity"
      description: "on modifie la quantité de l'article dont on a l'id"
      operationId: "updateQuantity"
      produces:
        - "application/json"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          type: "integer"
        - in: "path"
          name: "quantity"
          description: "la nouvelle quantitée"
          required: true
          type: "integer"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /order:
    post:
      tags:
      - "order"
      summary: "Create an order"
      description: "créer une commande et supprimer les articles du panier en utilisant le delete de /cart"
      operationId: "createOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          # Bonne idée mais je ne vois pas comment on fait le lien
          description: "panier que je veux valider et transformer en commande"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        # Toujours 400
        405:
          description: "Invalid input"
    get:
      tags:
        - "order"
      summary: "returnall orders"
      description: "retourne toutes les commandes qu'on peut filtrer graçe à l'enum et qu'on peut trier avec l'attribut sorted-by"
      operationId: "getOrders"
      produces:
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "status"
          in: "query"
          description: "satuts de la commande"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "En cours"
            - "Validée"
            - "Terminée"
            - "Annulée"
            default: "available"
        - name: "sorted-by-date"
          in: "query"
          description: "le tri par date on passe en parametre + ou mois pour le type de tri"
          required: false
          type: "string"
        - name: "sorted-by-status"
          in: "query"
          description: "le tri par statut on passe en parametre + ou mois pour le type de tri"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            # Sur ? je pense que ce devrait plutot être une liste d'order
            items:
              $ref: "#/definitions/Article"
        400:
          description: "Invalid status value"
    # PUT doit avoir un body
    put:
      tags:
      - "order"
      summary: "Update order"
      description: "on vérifie que le statut de la commande est à en cours puis on annule une commande"
      operationId: "cancelOrder"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "orderId"
          type: "string"
          description: "id de la commande dont on veut modifier le statut"
          required: true
        - in: "query"
          name: "cause"
          type: "string"
          description: "motif d'annulation"
          required: true
      responses:
        200:
          description: "successful operation"
          # Pourquoi un tableau ?
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CanceledOrder"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /order/{id}:
    get:
      tags:
        - "order"
      summary: "return bill of order"
      description: "retourne la facture d'une commande dont on a l'id"
      operationId: "getBill"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "l'id de la commande dont on veut retourner la facture"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrderBill"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
definitions:
  # Une suggestion est globalement un article
  Suggestion:
    type: "object"
    properties:
      id:
        type: "integer"
      texte:
        type: "string"
  Article:
    type: "object"
    properties:
      id:
        type: "integer"
      ref:
         type: "string"
      libelle:
         type: "string"
      price:
        type: "integer"
      description:
         type: "string"
      image:
         type: "object"
  DetailArticle:
    type: "object"
    properties:
      article:
        type: "object"
      fullDescription:
        type: "string"
      images:
        type: "array"
        items:
          type: "object"
      # On peut faire mieux qu'une string, genre un objet avec hauteur, largeur, longueur
      dimensions:
        type: "string"
      relatedArticles:
        type: "array"
        items:
            type: "object"
  Cart:
    type: "object"
    properties:
      updateDate:
        type: "string"
      articles:
        type: "array"
        items:
          type: "object"
      totalPrice:
        type: "integer"
  ArticleAttribute:
    type: "object"
    properties:
      id:
        type: "integer"
      ref:
         type: "string"
      libelle:
         type: "string"
      price:
        type: "integer"
      totalPrice:
        type: "integer"
      quantity:
         type: "integer"
      image:
         type: "object"
  Order:
    type: "object"
    properties:
      ref:
        type: "integer"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "En cours"
        - "Validée"
        - "Terminée"
        - "Annulée "
      date:
        type: "string"
      totalPrice:
        type: "integer"
  CanceledOrder:
    type: "object"
    properties:
      order:
        type: "object"
      cause:
        type: "string"
  OrderBill:
    type: "object"
    properties:
      id:
        type: "integer"
      date:
         type: "string"
      libelle:
         type: "string"
      articles:
        type: "array"
        items:
          type: "object"
      price:
        type: "integer"
        