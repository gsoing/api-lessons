swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
- "https"
produces:
  - application/json
consumes: 
  - application/json
paths:
  /products:
    get:
      summary: "List all products"
      operationId: listProducts
      tags:
        - products
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: A paged array of products
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Products'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

       
            
  user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
          
  inventory/{username}/{inventoryId}:
   get:
      tags:
      - "inventory"
      summary: "Find inventory by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getInventoryById"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "ID of the inventory of the client"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Inventory"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
   put:
      tags:
      - "inventory"
      summary: "Modifify an inventory by ID; products or quantity"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "putInventoryById"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "ID of the inventory of the client"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Inventory"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
   delete:
      tags:
      - "inventory"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteArticle"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "ID of the inventory that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Inventory not found"
          
  store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a product"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the product"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  store/order/{username}/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /store/order/findByStatus:
    get:
      tags:
      - "store"
      summary: "Finds orders by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findOrdersByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "pending"
          - "validated"
          - "terminated"
          - "cancelled"
          default: "available"
        collectionFormat: "multi"
        schema:
          $ref: "#/definitions/Summary"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        400:
          description: "Invalid status value"
definitions:
  Product:
    type: "object"
    required:
      - id
      - category
      - pictures
      - sizing
      - similarArticles
    properties:
      id:
        type: "integer"
        format: int64
      category:
        type: "integer"
      pictures:
        type: "array"
        xml:
            name:"photoUrl"
        wrapped: true
      sizing:
        type: "integer"
        format: int64
      similarArticles:
        type: "array"  
  Products:
    type: array
    required:
      - "id"
      - "name"
      - "category"
      - "price"
      - "description"
      - "imageUrl"
    properties:
      id:
        type: "integer"
        format: int64
      name:
        type: "string"
      category:
        $ref: "#/definitions/Category"
      price:
        type: "integer"
        format: int64
      description:
        type: "string"
      imageUrl:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
  Error:
    type: "object"
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Order:
    type: "object"
    required:
    - "id"
    - "productId"
    - "quantity"
    - "creationDate"
    - "lastUpdate"
    - "totalCost"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
      shipDate:
        type: "string"
        format: "date-time"
      lastUpdate:
        type: "string"
        format: "date-time"
      totalCost:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "pending"
        - "validated"
        - "terminated"
        - "cancelled"
      complete:
        type: "boolean"
        default: false
  Inventory:
    type: "object"
    required:
    - "id"
    - "listArticles"
    - "DateOfLastUpdate"
    - "totalCost"
    properties:
      id:
        type: "integer"
        format: "int64"
      listArticles:
        $ref: "#/definitions/ListArticles"
      DateOfLastUpdate:
        type: "string"
        format: "date-time"
      totalCost:
        type: "integer"
        format: "int64"  
        
  ListArticles:
    type: "array"
    required:
      - "id"
      - "name"
      - "photo"
      - "quantity"
      - "unitCost"
      - "totalCost"
    properties:
      id:
        type: "integer"
        format: int64
      name:
        type: "string"
      photo:
        type: "image"
      quantity:
        type: "integer"
        format: int64
      unitCost:
        type: "integer"
        format: int64
      totalCost:
        type: "integer"
        format: int64
  Summary:
    type: "array"
    required:
      - "id"
      - "date"
      - "status"
      - "price"
    properties:
      id:
        type: "integer"
        format: int64
      status:
        type: "string"
      date:
        type: "string"
        format: "date-time"
      price:
        type: "integer"
        format: int64
  
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"