
swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
tags:
  - name: "products"
    description: "Everything about our products"
  - name: "baskets"
    description: "Access to your baskets"
  - name: "orders"
    description: "View your orders"
schemes:
  - "https"
  - "http"
produces:
  - application/json
consumes: 
  - application/json
paths:
  /products/getProductInSuggestion:
    get:
      tags:
        - "products"
      description: "Get all product which are part of \"hot deals\"."
      responses:
        200:
          # Manque l'objet retour
          description: "successful operation"
  # On l'url ne doit pas comporter de méthode, il est plus adéquat de metter la query en queryParam
  "/products/getProductQuery/{query}":
    get:
      tags:
        - "products"
      description: "Get products by searching with keyword"
      # Les paramètres de tri ne sont pas forcément obligatoire
      # Il manque la pagination
      parameters:
        - name: "query"
          in: "path"
          type: "string"
          description: "query for products by keyWord"
          required: true
        - name: "sortByPrice"
          in : "path"
          type: "string"
          enum: [asc, desc]
          required: true
      responses:
        200:
          # manque l'objet retour
          description: "successful operation"
  # cette interface ne sert à rien le but était de pouvoir filtrer la recherche par catégorie en plus d'effectuer
  # une recherche
  "/products/getProductByCategory/{category}":
    get:
      tags:
        - "products"
      description: "Get products by searching with keyword"
      # Il manque les paramètres de pagination
      parameters:
        - name: "category"
          in: "path"
          type: "string"
          enum:
            - "HIGH-TECH"
            - "MAISON"
            - "VETEMENTS"
          description: "query for products by keyWord"
          required: true
      responses:
        # Manque l'object retour et la gestion de l'erreur 400 si la catégorie n'est pas la bonne
        200:
          description: "successful operation"
  # idem par la peine de mettre la méthode dans l'url /prodcuts/{id} est suffisant (ou /products/{id}/details)
  # A quoi sert la catégorie ici
  "/products/getProductDetails/{productId}/{category}":
    get:
      tags:
        - "products"
      description: "Returns details about a product"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
        - name: "category"
          in: "path"
          type: "string"
          enum:
            - "HIGH-TECH"
            - "MAISON"
            - "VETEMENTS"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        # La catégorie etant dans l'url, une url identifiant une ressource, l'erreur 400 n'est pas utile ici
        400:
          description: "Invalid id"
        404:
          description: "Product not "Product not found" 
  # On ne met pas d'action dans les URLs 
  "/baskets/{userId}/addProduct/{productId}":
    # Un put est un écriture, et donc il faut un body
    put:
      tags:
        - "baskets"
      description: "Add a product into your basket"
      # Il manque la quantité du produit
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to add"
          required: true
          type: "integer"
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
        # La catégorie etant dans l'url, une url identifiant une ressource, l'erreur 400 n'est pas utile ici
        400:
          description: "Invalid id"
        404:
          description: "Product not found"
  # Pas d'action dans les URL, la méthode delete suffit
  /baskets/{userId}/deleteProduct/{productId}:
    delete:
      tags:
        - "baskets"
      description: "Del a product into your basket"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to add"
          required: true
          type: "integer"
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
      responses:
        # Ici un code 204 aurait été plus approprié
        200:
          description: "successful operation"
        400:
          description: "Invalid id"
        404:
          description: "Product not found"
  #  Pas d'action dans les URL, de plus une URL identifie un objet, ici avec la quantité n'idientifie rien
  /baskets/{userId}/updateProductQty/{productId}/{newQty}:
    # un put est un écriture si on passe un body vide cela supprime tout
    put:
      tags:
        - "baskets"
      description: "Add a product into your basket"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product we want to modify qty"
          required: true
          type: "integer"
        - name: "newQty"
          in: "path"
          description: "new qty to set"
          required: true
          type: "integer"
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid id"
        404:
          description: "Product not found"
  # Toujours pas d'action dans les URLs
  /baskets/{userId}/emptyBasket:
    # effectivement un put sans body peut le faire, mais vu l'utilisation dans les méthodes précédentes
    # je ne suis pas sur que ce soit la bonne utilisation
    # Un delete est tout aussi simple
    put:
      tags:
        - "baskets"
      description: "Empty your basket"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
      responses:
        # on n'a plus de 404 ?
        200:
          description: "successful operation"
  # Idée intéressante créer l'order a partir du basket
  /baskets/{userId}/createOrder:
    post:
      tags:
        - "baskets"
      description: "Create an order"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
  # Le statut est plus un critère de filtre qu'une définition d'identifiant
  /orders/{userId}/getAllOrders/{status}:
    get:
      tags:
        - "orders"
      description: "Create an order"
      # manque la pagination
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          type: "integer"
        # et si on veut tous les orders on fait comment ? 
        - name: "status"
          in: "path"
          description: "ID of the user"
          required: true
          type: 'string'
          enum : [Closed,Canceled,Pending,Validate]
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
  /orders/{orderId}:
    # Attention delete ne prend pas de body
    delete:
      tags:
      - "orders"
      summary: "cancel an existing order"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        type: "string"
        required: true
      - name: "reason"
        in: "query"
        type: "string"
      responses:
        # Pourquoi on retourne des produits
        # et gérer l'interdiction si la commande n'est pas au bon statut
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  /orders/{orderId}:
    get:
      tags:
      - "orders"
      summary: "get bill for an existing order"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        type: "string"
        required: true
      responses:
        # Pourquoi retourner un tableau de commande ?
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
definitions:
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
      reference:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"
      shortDescription:
        type: "string"
      pictures:
        type: "array"
        items: 
            type: "string"
      # Un peu léger, comment on fait la différence entre hauteur / largeur / profondeur ?
      dimensions:
        type: "array"
        items: 
            type: "integer"
      isHotDeal:
        type: "boolean"
      category:
        $ref: "#/definitions/Category"
  Category:
    type: "string"
    enum:
    - "HIGH-TECH"
    - "MAISON"
    - "VETEMENTS"
  Status:
    type: "string"
    enum:
    - "Pending"
    - "Closed"
    - "Validate"
    - "Canceled"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
      creationdate:
        type: "string"
      lastUpdateDate:
        type: "string"
      Satus:
        type: "array"
        items:
          $ref: '#/definitions/Status'
      products:
        type: "array"
        items:
          $ref: '#/definitions/ProductInBasket'
  Basket:
    type: "object"
    properties:
      id:
        type: "integer"
      lastUpdateDate:
        type: "string"
      productsAdd:
        type: "array"
        items:
          $ref: '#/definitions/ProductInBasket'
  ProductInBasket:
    type: "object"
    properties:
      id:
        type: "integer"
      reference:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"
      totalPrice:
        type: "integer"
      pictures:
        type: "array"
        items: 
            type: "string"
