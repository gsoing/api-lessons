swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
tags:
  - name : "Products"
    description: "Manage products for customers"
  - name : "Basket"
    description: "Manage basket for customers"
  - name : "Order"
    description: "Manage orders for customers"
schemes:
  - "https"
paths:
  # Avec un s cela aurait été mieux
  /product:
    # Manquer de la pagination
    get:
      tags:
        - "Products"
      summary: "Result"
      description: "List of products"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list of products."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Product'
  # Bizarre de mettre la recherche dans le path
  /product/{wording}?sortByPrice=[asc|desc]:
    get:
      tags:
      - "Products"
      summary: "Order the products"
      description: "Order products by price"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: wording
        type: string
        required: true
      - in: path
        name : sortByPrice
        type : string
        enum: [asc, desc]
        required: true
      responses:  
        200:
          description: "A list of products"
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
  # Le filtrage doit se faire dans le même méthode que la recherche
  # Ah le s est revenu
  /products/filterProductByCategory/{category}:
    get:
      tags:
        - "Products"
      description: "Get product filtery by category"
      # Manque de la pagination
      parameters:
        - in: path
          name: category
          type: string
          enum:
            - "HIGH-TECH"
            - "MAISON"
            - "VÊTEMENTS"
          description: "Filtering"
          required: true
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
  ## Manque la récupération du détail d'un produit
  # Manque le S
  /basket/{id}:
    get:
      tags:
        - "Basket"
      summary: "Get your basket"
      description: "Get the basket of a customer"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        # Si le panier n'existe pas ?
        200:
          description: "Here is your basket"
          schema:
            $ref: "#/definitions/Basket"
  # Pourquoi cette url, le verbe + l'url /basket/{id} sont suffisants
  /basket/{id}/updateBasket: 
    put:
      tags:
        - "Basket"
      summary: "Update a basket"
      description: "Update the basket corresponding to the client id" 
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        # Vu la définition de tes objets c'est un peu lourd de renvoyer le panier
        # mais c'est fonctionnel
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Basket"
      responses:
        # Si le panier n'existe pas ?
        200:
          # On a modifié le panier ca peut-être une bonne idée de le retourner
          description: OK
  # Pareil pas besoin de préciser qu'on delete
  /basket/{id}/deleteBasket:  
    delete:
      tags:
        - "Basket"
      summary: "Delete a basket"
      description: "Delete the basket corresponding to the client id" 
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        # Delete ne prend pas de body et je ne vois pas pkoi on en a besoin
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Basket"
      responses:
        # Si on ne retourne pas de body un 204 est mieux
        200:
          description: OK
  # Manque le S
  # Bon même si c'est écrit nul part, je pense que tu considères ici id comme étant celui de l'utilsateur
  /order/{id}?sortByStatus=[asc|desc]:
    get:
      tags:
        - "Order"
      summary: "Show the orders"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: path
          name : sortByStatus
          type : string
          enum: [asc, desc]
          required: true
      responses:  
        200:
          description: "A list of orders"
          schema:
            # l'url indique une commande et ici tu retournes une liste
            # de plus il faut toujours paginer une liste
            type: "array"
            items:
              $ref: "#/definitions/Order"
  # pareil à quoi correspond l'id ?
  "/order/{id}/filterByStatus/{status}":
    get:
      tags:
        - "Order"
      summary: "Filter orders"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: path
          name : status
          type : string
          enum:
            -  toto
          required: true
      responses:  
        200:
          description: "A list of orders"
          # idem qu'au dessus l'url semble indiquer une commande et tu retournes une liste
          # et ce n'est pas paginé
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
  # ces 3 URL peuvent être regroupé en 1 seule en jouant sur les queryParam
  /order/{id}?sortByDate=[asc|desc]:
    get:
      tags:
        - "Order"
      summary: "Show the orders"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: path
          name : sortByDate
          type : string
          enum:
            - "EN COURS"
            - "VALIDEE"
            - "TERMINEE"
            - "ANNULEE"
          required: true
      responses:  
        200:
          description: "A list of filtered orders"
          # idem qu'au dessus l'url semble indiquer une commande et tu retournes une liste
          # et ce n'est pas paginé
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
  # Il manque la récupération du détail d'un produit
  # la validation du panier
  # la récupération de la facture à partir de la commande
  # la mise à jour de la commande
definitions:
  Product:
    type: object
    properties:
      reference:
        type: integer
      wording:
        type: string
      price:
        type: number
      description:
        type: string
      picture:
        type: string # une url
      category:
        type: string
        enum:
          - "HIGH-TECH"
          - "MAISON"
          - "VÊTEMENTS"
      details:
        $ref: "#/definitions/Details"
    required:
      - reference
      - wording
      - price
      - description
      - picture
      - category
      - details
  Details:
    type: object
    properties:
      completeDescription:
        type: string
      pictureList:
        type: array
        items:
          type: string # des url
      # on peut faire mieux que 1 string quand même :P
      # un objet avec hauteur / largeur / profondeur
      size:
        type: string #L x M x H
    required: 
      - completeDescription
      - pictureList
      - size
  SelectedProduct:
    type: object
    properties:
      product:
        $ref: "#/definitions/Product"
      quantity:
        type: integer
      totalPrice:
        type: number
    required: 
      - product
      - quantity
      - totalPrice
  Basket:
    type: object
    properties:
      id: #correspondra à l'id du client vu que 1 client à 1 seul panier
        type: integer
      lastUpdate:
        type: string
        format: timestamp
      productList:
        type: array
        items:
          $ref: "#/definitions/SelectedProduct"
      totalPrice:
        type: number
    required: 
      - id
      - lastUpdate
  Order:
    type: object
    properties:
      id:
        type: integer
      status:
        type: string
        enum:
          - "EN COURS"
          - "VALIDEE"
          - "TERMINEE"
          - "ANNULEE"
      justification:
        type: string
      createdAt:
        type: string
        format: timestamp
      lastUpdate:
        type: string
        format: timestamp
      customer:
        $ref: "#/definitions/Customer"
      productList:
        type: array
        items:
          $ref: "#/definitions/SelectedProduct"
      totalPrice:
        type: number
    required:
      - id
      - status
      - createdAt
      - lastUpdate
      - productList
      - totalPrice
  Customer:
    type: object
    properties:
      customer: #pas de spec pour client donc juste un champ pour default
        type: string
    required:
      - customer
      