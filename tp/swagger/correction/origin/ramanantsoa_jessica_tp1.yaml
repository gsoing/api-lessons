swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
- "https"
produces:
  - application/json
consumes: 
  - application/json
tags:
- name: "product"
  description: "Affichage des produits"
- name: "cart"
  description: "Gestion du Panier"
- name: "order"
  description: "Gestion de la commande"
paths:
  #products 1
  /product/bonPlans:
    get:
      tags:
      - "product"
      summary: "Afficher les bons plans"
      description: ""
      operationId: "bonsPlans"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid"
        404:
          description: "Nothing to show"
  #products 2
  #products 3
  /product/findByStatus:
    get:
      tags:
      - "product"
      summary: ""
      description: ""
      operationId: "findItemsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "HIGH-TECH"
          - "MAISON"
          - "VETEMENT"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/item"
        400:
          description: "Invalid status value"
  #product 4
  /product/{productId}:
    get:
      tags:
      - "product"
      summary: "Find details about an item"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of article to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
#cart
  #cart 1
  /cart/{customerId}:
    get:
        tags:
        - "cart"
        summary: "show customer cart"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
          - name: "customerId"
            in: "path"
            description: "ID of the customer"
            required: true
            type: "integer"
            format: "int64"
        responses:
          200:
            description: "successful operation"
            schema:
              $ref: "#/definitions/cart"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Article not found"
  #cart2
  #cart3
  
  #cart4
  /cart/{customerId}/add:
    post:
      tags:
      - "cart"
      parameters:
        - in: "path" 
          name: "customerId"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/cart"
      summary: "Add a item to cart"
      description: ""
      operationId: "addItem"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
    responses:
       404:
        description: "Something Wrong"
  /cart/{customerId}/update:
    put:
      tags:
      - "cart"
      parameters:
        - in: "path" 
          name: "customerId"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/cart"
      summary: "Update an item in cart"
      description: ""
      operationId: "addItem"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
    responses:
    
  /cart/{customerId}/empty :   
    delete:
      parameters:
        - in: "path" 
          name: "customerId"
          required: true
          type: "integer"
          
  
  
  
#model
definitions:
  item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      reference:
        type: "string"
      price:
        type: "integer"
      description:
        type: "string"
      img:
        type: "string"
      type:
        type: "string"
        enum:
        - "bonplan"
        - "Article vedette"
        - "Article normal"
      category:
        type: "string"
        enum:
        - "HIGH-TECH"
        - "MAISON"
        - "VETEMENT"
      
  cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      customer_id:
        type: "integer"
        format: "int64"
      totalPrice:
        type: "integer"
        format: "int64"
      lastupdated:
        type: "string"
        format: "date-time"
  order:
    type: "object"
    properties:
      id:
        type: "integer"
      status:
        type: "string"
        enum:
        - "In progress"
        - "Validated"
        - "Completed"
        - "Cancelled"
        
      