swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
tags:
  - name: "products"
    description: "Everything about our products"
  - name: "baskets"
    description: "Operations about the user basket"
  - name: "orders"
    description: "Operations about the order"
paths:
  # One ne met pas de verbe dans les url un /products/suggestion est suffisant
  /products/findBySuggestion/{suggestionName}:
    get:
      tags:
      - "products"
      summary: "find all products from a suggestion"
      operationId: "findProductsBySuggestion"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "suggestionName"
          in: "path"
          type: "string"
          description: "The suggestion category name"
          required: true
      responses:
        500:
          description: "Server error"
        405:
          description: "Invalid input"
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  # Pourquoi productQuery ? un GET /products?query= truc est suffisant
  /products/productQuery/{queryBody}:
    get:
      tags:
        - "products"
      summary: "Do a query to find product"
      operationId: "findPetsByStatus"
      produces:
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "queryBody"
          in: "path"
          type: "string"
          description: "Query for products by keyWord"
          required: true
        - in: "path"
          name: "sortByPrice"
          type: "string"
          enum: [asc, desc]
          required: true
      responses:
        200:
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        500:
          description: "Server error"
  # On peut fusionner cette url avec la précédente
  /products/findByCategory/{categoryName}:
    get:
      tags:
        - "products"
      summary: "Finds products by category"
      operationId: "findProductsByCategory"
      produces:
        - "application/json"
      # Manque la pagination
      parameters:
        - name: "categoryName"
          in: "path"
          description: "The category name"
          required: true
          type: "string"
          enum: [HIGH-TECH, MAISON, VÊTEMENTS]
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid category name value"
        500:
          description: "Server error"
  /product/{productId}:
    get:
      tags:
        - "products"
      summary: "get product detail by id"
      description: "Returns details about a product"
      operationId: "getProductDetailById"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CompletedDescription"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
  /basket/{userId}:
    # Put écrit l'objet complet, ici un POST est plus pertinent
    put:
      tags:
        - "baskets"
      summary: "add new product in the user's basket"
      operationId: "addNewProductInBasket"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
        - name: "article"
          in: "body"
          schema: 
            $ref : "#/definitions/productOfBasket"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error in body"
        500:
          description: "server error"
    delete:
      tags:
        - "baskets"
      summary: "delete existing product in the user's basket"
      operationId: "deleteProductInBasket"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          type: "integer"
          format: "int64"
          required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "error wrong values"
        500:
          description: "server error"
    # Idem PATCH prend un body
    patch:
      tags:
        - "baskets"
      summary: "update quantity for a product in the user's basket"
      operationId: "updateProductQuantity"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          type: "integer"
          format: "int64"
          required: true
        - name: "quantity"
          in: "path"
          type: "integer"
          format: "int64"
          required: true
      responses:
        200:
          description: "successful operation"
        400:
          description: "error wrong values"
        500:
          description: "server error"
  # Pourquoi cette URL supplémentaire ? DELETE /userId/basket sans le paramètre articleId est aussi valable
  /{userId}/emptyBasket:
    delete:
      tags:
        - "baskets"
      summary: "empty all products in a user basket"
      operationId: "emptyUserBasket"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error wrong values"
        500:
          description: "server error"
  /{userId}/validateBasket:
    post:
      tags:
        - "baskets"
      summary: "validate the basket and start the order"
      operationId: "validateBasket"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        # Retourner la commande aurait été une bonne idée pour faire le lien
        # avec les url suivante
        200:
          description: "successful operation"
        400:
          description: "error wrong values"
        500:
          description: "server error"
  /orders/{clientId}/{orderId}/:
    delete:
      tags:
        - "orders"
      summary: "cancel an existing order"
      operationId: "cancelOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "clientId"
          in: "path"
          type: "string"
          required: true
        - name: "orderId"
          in: "path"
          type: "string"
          required: true
        - name: "reason"
          in: "query"
          type: "string"
      responses:
        500:
          description: "Server error"
        # Plutot 400
        405:
          description: "Invalid input"
        # Pourquoi retourner un produit ?
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  /orders/{clientId}/{orderId}:
    get:
      tags:
        - "orders"
      summary: "get bill for an existing order"
      operationId: "getOrderBill"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "clientId"
          in: "path"
          type: "string"
          required: true
        - name: "orderId"
          in: "path"
          type: "string"
          required: true
      responses:
        500:
          description: "Server error"
        # vu les paramètre c'est plutot un 404
        405:
          description: "Invalid input"
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
  # Manque la récupération de toutes les commandes d'un utilisateur
definitions:
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      price:
        type: "integer"
        format: "int32"
      description:
        type: "string"
      image:
        type: "string"
  CompletedDescription:
    type: "object"
    properties:
      product:
        $ref: "#/definitions/Product"
      productRef:
        type: "string"
      detailledDescription:
        type: "string"
      listOfPictures:
        type: "array"
        items:
          type: "string"
      articleSize:
        type: "string"
      similarProduct:
        type: "array"
        items:
          $ref: "#/definitions/Product"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Basket:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      lastUpdateDateTime:
        type: "string"
      listOfProduct:
        type: "array"
        items:
          $ref: "#/definitions/Product"
      basketPrice:
        type: "integer"
        format: "int64"
  productOfBasket:
    type: "object"
    properties:
      id: 
        type: "integer"
        format: "int64"
      libelleProduct:
        type: "string"
      picture:
        type: "string"
      quantity: 
        type: "integer"
        format: "int64"
      unitPrice:
        type: "integer"
        format: "int64"
      totalPrice:
        type: "integer"
        format: "int64"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      clientId:
        type: "integer"
        format: "int64"
      creationDate:
        type: "string"
      lastUpdateDate:
        type: "string"
      productList:
        type: "array"
        items:
          $ref: "#/definitions/productOfBasket"
      status:
        type: "string"
        enum: [En cours, Validée, Terminée, Annulée]
      totalPrice:
        type: "integer"
        format: "int64"
    xml:
      name: "Tag"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
