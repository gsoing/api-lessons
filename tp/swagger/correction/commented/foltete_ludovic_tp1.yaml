swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1"
schemes:
  - "https"
produces:
  - application/json
consumes: 
  - application/json
paths:
  '/{userId}/suggestions':
    get:
      tags:
        - "suggestion"
      summary: "Finds all suggestions"
      description: "Returns all suggestions from the system that the user has access to"
      operationId: "getArticleByUserSuggestions"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return suggestions"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
        404:
          description: "No suggestions today... :("
  # un simple GET /articles est suffisant vu que tu mets un queryParam categorie
  '/articles/findByCategories':
    get:
      tags:
        - "article"
      summary: "Finds article by category"
      description: "Returns all articles from the system that match with categories given"
      operationId: "getArticleByCategories"
      # Manque la pagination
      # et un paramètre de recherche
      parameters:
        - name: "categories"
          in: "query"
          description: "Categories values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "HIGH-TECH"
            - "MAISON"
            - "VÊTEMENTS"
            default: "AUCUNE"
        - name: "sort"
          in : "query"
          description: "Sort the result by price"
          required : false
          type : "string"
          enum :
            - "greater"
            - "lower"
      responses:
        200:
          description: "successful operation"
          # Un tableau aurait mieux
          schema:
            $ref: '#/definitions/Article'
        404:
          description: "No article found with this categories"
  '/articles/{idArticle}':
    get:
      tags:
        - "article"
      summary: "Find article by ID"
      description: "Returns a single article"
      operationId: "getArticleById"
      parameters:
        - name: "idArticle"
          in: "path"
          description: "ID of article to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
        # Un peu overkill ici
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
  '/{userId}/basket':
    parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return basket"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "basket"
      summary: "Get all elements"
      description: "Returns all elements from the basket that the user has access to"
      operationId: "getBasket"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Basket"
    post:
      tags:
        - "basket"
      summary: "Add a new article to the basket"
      description: ""
      operationId: "addArticle"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return suggestions"
          required: true
          type: "integer"
          format: "int64"
        # Tu aurais pu faire un objet un peu plus léger
        - in: "body"
          name: "body"
          description: "Article object that needs to be added to the basket"
          required: true
          schema:
            $ref: "#/definitions/Article"
      responses:
        # Plutot 400 
        # Retourner le panier mis à jour aurait été une bonne idée
        405:
          description: "Invalid input"
    delete:
      tags:
        - "basket"
      summary: "Deletes all articles"
      description: ""
      operationId: "deleteAllArticle"
      responses:
        # Si tu ne retournes rien mieux vaut un 204 ou un 202
        200:
          description: "All articles has been deleted"
  "/{userId}/basket/{articleId}":
    delete:
      tags:
        - "basket"
      summary: "Deletes a article"
      description: ""
      operationId: "deleteArticle"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return suggestions"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          description: "Article id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        # Si tout se passe bien ??? 200 
        400:
          description: "Invalid ID supplied"
        404:
          description: "Article not found"
    post:
      tags:
        - "basket"
      summary: "Updates a quantity article in the basket with form data"
      description: ""
      operationId: "updateArticleWithForm"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return suggestions"
          required: true
          type: "integer"
          format: "int64"
        - name: "articleId"
          in: "path"
          description: "ID of article that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "quantity"
          in: "body"
          description: "Updated quantity of the article"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        # 400 et 404 plutot
        405:
          description: "Invalid input"
  "/{userId}/basket/validate":
    get:
      tags:
        - "basket"
      summary: "Validate the basket and turn it into a command"
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return suggestions"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Basket has been valitated !"
  '/{userId}/command':
   get:
      tags:
        - "command"
      summary: "Get all commands"
      description: "Returns all commands from the system that the user has access to"
      operationId: "getCommand"
      parameters:
      # Manque la pagination
      - name: "userId"
        in: "path"
        description: "ID of user to return basket"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          # Un tableau aurait été mieux
          schema:
            $ref: "#/definitions/Command"
  '/{userId}/command/findByStatus':
    get:
      tags:
        - "command"
      summary: "Finds Commands by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findCommandsByStatus"
      # Manque la pagination et aurait pu être fusionnée
      # avec le service précédent
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return basket"
          required: true
          type: "integer"
          format: "int64"
        - name: "sort"
          in: "query"
          description: "Sort by date and/or status"
          required: false
          type: "array"
          items: 
            type: string
            pattern: '[-+](date|status)'
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
            - "En cours"
            - "Validée"
            - "Terminée"
            - "Annulée"
            default: "En cours"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Command"
        400:
          description: "Invalid status value"
  '/{userId}/command/{commandId}':
    get:
      tags:
      - "command"
      summary: "Find command by ID"
      description: "Returns a single command"
      operationId: "getCommandById"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return basket"
        required: true
        type: "integer"
        format: "int64"
      - name: "commandId"
        in: "path"
        description: "ID of command to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Command"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Command not found"
    delete:
      tags:
        - "command"
      summary: "Cancel a command"
      description: ""
      operationId: "deleteCommand"
      parameters:
        # Manque le motif de l'annulation
        - name: "userId"
          in: "path"
          description: "ID of user to return basket"
          required: true
          type: "integer"
          format: "int64"
        - name: "commandId"
          in: "path"
          description: "command id to cancel"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Only command with the status 'En cours' can be cancelled"
        404:
          description: "Pet not found"
definitions: 
  Article: 
    type: "object"
    required: 
      - "id"
      - "reference"
      - "label"
      - "price"
      - "smallDescription"
      - "picture"
      - "categories"
    properties:
      id:
        type: "integer"
        format: "int64"
      reference: 
        type: "string"
      label: 
        type: "string"
      price:
        type: "integer"
        format: "int64"
      smallDescription:
        type: "string"
      picture:
        type: "string"
      categories:
        type : "string"
      completedescription :
        type : "string"
      pictureList :
        type: "array"
        items:
          type: "string"
      dimensions :
        type : "array"
        minItems: 3
        maxItems: 3
        items:
          type: "integer"
          format: "int64"
      similarArticleList :
        type : "array"
        items:
          $ref: "#/definitions/Article"
  Basket:
    type : "object"
    required: 
      - "id"
      - "updateDate"
      - "articleList"
      - "articleListQuantity"
      - "articleListTotalCost"
      - "totalCost"
    properties:
      id:
        type: "integer"
        format: "int64"
      updateDate: 
        type: "string"
        format: "date"
      articleList:
        type: "array"
        items:
          $ref: "#/definitions/Article"
      articleListQuantity:
        type: "array"
        items:
          type: "integer"
          format: "int64"
      articleListTotalCost:
        type: "array"
        items:
          type : "integer"
          format: "float"
      totalCost:
        type: "integer"
        format: "int64"
  Command:
    type : "object"
    required: 
      - "id"
      - "status"
      - "basket"
      - "creationDate"
      - "updateDate"
      - "totalCost"
    properties:
      id:
        type: "integer"
        format: "int64"
      status: 
        type: "string"
        enum:
          - "En cours"
          - "Validée"
          - "Terminée"
          - "Annulée"
        default: "En cours"
      basket:
        $ref: "#/definitions/Basket"
      creationDate: 
        type: "string"
        format: "date"
      updateDate: 
        type: "string"
        format: "date"
      totalCost:
        type: "integer"
        format: "int64"
