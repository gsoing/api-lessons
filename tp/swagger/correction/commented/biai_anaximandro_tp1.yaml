swagger: "2.0"
info:
  description: "Ceci est ma super API pour remplacer Amazon"
  version: "1.0.0"
  title: "e-commerce API"
host: "commerce.io"
basePath: "/v1/"
schemes:
  - "https"
produces: 
  - application/json
consumes: 
  - application/json
tags: 
  - name: "Products"
    description: "See and purchase all products from database"
  - name: "Basket"
    description: "See products in the basket of the user"
  - name: "Order"
    description: "Manage products in order"
paths:
  /User/{user_type}:
    get:
      tags:
        - "Products"
      summary: "Proposal page"
      description: "Show products proposal by {user_type}"
      produces:
        - "application/json"
      parameters:
      - in: path
        name: user_type
        type: string
        required: true
      responses:
        200:
          description: OK
  /User/{id}/basket:
    get:
      tags:
      - "Basket"
      summary: "See the basket"
      description: "Consult his basket"
      produces:
        - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: OK
    # Il manque le body en entrée, un PUT sur /cart doit modifier tout le panier et pas juste
    # une quantité d'un article
    put:
      tags:
      - "Basket"
      summary: "Update basket"
      description: "Change quantity of an article"
      produces:
       - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: OK
    # DELETE va vider tout le panier si on suit la norme REST, manque de quoi supprimer un article
    delete:
      tags:
      - "Basket"
      summary: "Delete"
      description: "Delete on or several products"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: OK
  /User/{id}/orders:
    get:
      tags:
      - "Order"
      summary: "See the order"
      description: "Consult an order"
      produces:
        - "application/json"
      # Manque la pagination
      # et la possibilité de trier, filtrer par statut
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: OK
  /User/{id}/Order/{references}:  
    delete:
      tags:
        - "Order"
      summary: "Cancel"
      description: "Cancel the order (je n'ai pas su comment conditionner l'annulation au fait que la commande soit en cours)"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: path
          name: references
          type: integer
          required: true
      responses:
        200:
          description: OK
  /Product/{product_name}:
      get:
        tags:
        - "Products"
        summary: "Research a product"
        description: "Find a product by {product_name}"
        produces:
          - "application/json"
        parameters:
          - in: path
            name: product_name
            type: string
            required: true
        responses:
          200:
            description: OK
  /Product/{product_type}/Products:
    get:
      tags:
      - "Products"
      summary: "Research products"
      description: "Find products by {product_type}"
      produces :
        - "application/json"
      # Manque la pagination
      parameters:
        - in: path
          name: product_type
          type: string
          required: true
      responses:
        200:
          description: OK
definitions:
  Product:
    type: object
    properties:
      references:
        type: integer
      product_type:
        type: string
      product_name:
        type: string
      price:
        type: number
      short_description:
        type: string
      complete_description:
        type: string
      picture:
        type: object
    required: 
      - references
      - product_type
      - price
      - short_description
      - complete_description
      - picture
  Basket:
    type: object
    properties:
      user:
        $ref: "#/definitions/User"
      last_update_date:
        type: string
      product_list:
        type: array
        items:
          type: object
      total_cost:
        type: number
    required: 
      - user
      - last_update_date
      - product_list
      - total_cost
  Order:
    type: object
    properties:
      user:
        $ref: "#/definitions/User"
      references:
        type: integer
      state:
        type: string
      creation_date:
        type: string
      last_update_date:
        type: string
      product_list:
        type: array
        items:
          type: object
      total_cost:
        type: number          
    required: 
      - user
      - references
      - state
      - creation_date
      - total_cost
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      user_type:
        type: string
    required: 
    - id
    - name
    - user_type
    